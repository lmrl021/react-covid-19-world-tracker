{"version":3,"sources":["components/CountryCode.js","components/CountryData.js","components/Home.js","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["isoCountries","GetCountryCode","str","hasOwnProperty","CountryData","getFlag","cd","replace","this","props","country","confirmed","recovered","deaths","card","backgroundColor","color","style","className","src","alt","width","Intl","NumberFormat","format","Component","Home","fetchData","a","axios","get","covid_data","data","startDate","state","start_date","moment","subtract","console","log","result","Object","keys","map","key","item2","push","pop","setState","generetaTotalCases","generateRandomColor","name","letters","split","i","Math","floor","random","length","Table","responsive","Footer","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e5f4a7d.chunk.js","sourcesContent":["var isoCountries = {\r\n    'Afghanistan': 'AF',\r\n    'Aland Islands': 'AX',\r\n    'Albania': 'AL',\r\n    'Algeria': 'DZ',\r\n    'American Samoa': 'AS',\r\n    'Andorra': 'AD',\r\n    'Angola': 'AO',\r\n    'Anguilla': 'AI',\r\n    'Antarctica': 'AQ',\r\n    'Antigua and Barbuda': 'AG',\r\n    'Argentina': 'AR',\r\n    'Armenia': 'AM',\r\n    'Aruba': 'AW',\r\n    'Australia': 'AU',\r\n    'Austria': 'AT',\r\n    'Azerbaijan': 'AZ',\r\n    'Bahamas': 'BS',\r\n    'Bahrain': 'BH',\r\n    'Bangladesh': 'BD',\r\n    'Barbados': 'BB',\r\n    'Belarus': 'BY',\r\n    'Belgium': 'BE',\r\n    'Belize': 'BZ',\r\n    'Benin': 'BJ',\r\n    'Bermuda': 'BM',\r\n    'Bhutan': 'BT',\r\n    'Bolivia': 'BO',\r\n    'Bosnia and Herzegovina': 'BA',\r\n    'Botswana': 'BW',\r\n    'Bouvet Island': 'BV',\r\n    'Brazil': 'BR',\r\n    'British Indian Ocean Territory': 'IO',\r\n    'Brunei': 'BN',\r\n    'Bulgaria': 'BG',\r\n    'Burkina Faso': 'BF',\r\n    'Burundi': 'BI',\r\n    'Cambodia': 'KH',\r\n    'Cameroon': 'CM',\r\n    'Canada': 'CA',\r\n    'Cabo Verde': 'CV',\r\n    'Cayman Islands': 'KY',\r\n    'Central African Republic': 'CF',\r\n    'Chad': 'TD',\r\n    'Chile': 'CL',\r\n    'China': 'CN',\r\n    'Christmas Island': 'CX',\r\n    'Cocos (Keeling) Islands': 'CC',\r\n    'Colombia': 'CO',\r\n    'Comoros': 'KM',\r\n    'Congo (Brazzaville)': 'CG',\r\n    'Congo (Kinshasa)': 'CD',\r\n    'Cook Islands': 'CK',\r\n    'Costa Rica': 'CR',\r\n    'Cote d\\'Ivoire': 'CI',\r\n    'Croatia': 'HR',\r\n    'Cuba': 'CU',\r\n    'Cyprus': 'CY',\r\n    'Czechia': 'CZ',\r\n    'Denmark': 'DK',\r\n    'Djibouti': 'DJ',\r\n    'Dominica': 'DM',\r\n    'Dominican Republic': 'DO',\r\n    'Ecuador': 'EC',\r\n    'Egypt': 'EG',\r\n    'El Salvador': 'SV',\r\n    'Equatorial Guinea': 'GQ',\r\n    'Eritrea': 'ER',\r\n    'Estonia': 'EE',\r\n    'Ethiopia': 'ET',\r\n    'Falkland Islands': 'FK',\r\n    'Faroe Islands': 'FO',\r\n    'Fiji': 'FJ',\r\n    'Finland': 'FI',\r\n    'France': 'FR',\r\n    'French Guiana': 'GF',\r\n    'French Polynesia': 'PF',\r\n    'French Southern Territories': 'TF',\r\n    'Gabon': 'GA',\r\n    'Gambia': 'GM',\r\n    'Georgia': 'GE',\r\n    'Germany': 'DE',\r\n    'Ghana': 'GH',\r\n    'Gibraltar': 'GI',\r\n    'Greece': 'GR',\r\n    'Greenland': 'GL',\r\n    'Grenada': 'GD',\r\n    'Guadeloupe': 'GP',\r\n    'Guam': 'GU',\r\n    'Guatemala': 'GT',\r\n    'Guernsey': 'GG',\r\n    'Guinea': 'GN',\r\n    'Guinea-Bissau': 'GW',\r\n    'Guyana': 'GY',\r\n    'Haiti': 'HT',\r\n    'Heard Island & Mcdonald Islands': 'HM',\r\n    'Holy See': 'VA',\r\n    'Honduras': 'HN',\r\n    'Hong Kong': 'HK',\r\n    'Hungary': 'HU',\r\n    'Iceland': 'IS',\r\n    'India': 'IN',\r\n    'Indonesia': 'ID',\r\n    'Iran': 'IR',\r\n    'Iraq': 'IQ',\r\n    'Ireland': 'IE',\r\n    'Isle Of Man': 'IM',\r\n    'Israel': 'IL',\r\n    'Italy': 'IT',\r\n    'Jamaica': 'JM',\r\n    'Japan': 'JP',\r\n    'Jersey': 'JE',\r\n    'Jordan': 'JO',\r\n    'Kazakhstan': 'KZ',\r\n    'Kenya': 'KE',\r\n    'Kiribati': 'KI',\r\n    'Kosovo': 'XK',\r\n    'Korea, South': 'KR',\r\n    'Kuwait': 'KW',\r\n    'Kyrgyzstan': 'KG',\r\n    'Laos': 'LA',\r\n    'Latvia': 'LV',\r\n    'Lebanon': 'LB',\r\n    'Lesotho': 'LS',\r\n    'Liberia': 'LR',\r\n    'Libya': 'LY',\r\n    'Liechtenstein': 'LI',\r\n    'Lithuania': 'LT',\r\n    'Luxembourg': 'LU',\r\n    'Macao': 'MO',\r\n    'North Macedonia': 'MK',\r\n    'Madagascar': 'MG',\r\n    'Malawi': 'MW',\r\n    'Malaysia': 'MY',\r\n    'Maldives': 'MV',\r\n    'Mali': 'ML',\r\n    'Malta': 'MT',\r\n    'Marshall Islands': 'MH',\r\n    'Martinique': 'MQ',\r\n    'Mauritania': 'MR',\r\n    'Mauritius': 'MU',\r\n    'Mayotte': 'YT',\r\n    'Mexico': 'MX',\r\n    'Micronesia, Federated States Of': 'FM',\r\n    'Moldova': 'MD',\r\n    'Monaco': 'MC',\r\n    'Mongolia': 'MN',\r\n    'Montenegro': 'ME',\r\n    'Montserrat': 'MS',\r\n    'Morocco': 'MA',\r\n    'Mozambique': 'MZ',\r\n    'Burma': 'MM',\r\n    'Namibia': 'NA',\r\n    'Nauru': 'NR',\r\n    'Nepal': 'NP',\r\n    'Netherlands': 'NL',\r\n    'Netherlands Antilles': 'AN',\r\n    'New Caledonia': 'NC',\r\n    'New Zealand': 'NZ',\r\n    'Nicaragua': 'NI',\r\n    'Niger': 'NE',\r\n    'Nigeria': 'NG',\r\n    'Niue': 'NU',\r\n    'Norfolk Island': 'NF',\r\n    'Northern Mariana Islands': 'MP',\r\n    'Norway': 'NO',\r\n    'Oman': 'OM',\r\n    'Pakistan': 'PK',\r\n    'Palau': 'PW',\r\n    'Palestinian Territory, Occupied': 'PS',\r\n    'Panama': 'PA',\r\n    'Papua New Guinea': 'PG',\r\n    'Paraguay': 'PY',\r\n    'Peru': 'PE',\r\n    'Philippines': 'PH',\r\n    'Pitcairn': 'PN',\r\n    'Poland': 'PL',\r\n    'Portugal': 'PT',\r\n    'Puerto Rico': 'PR',\r\n    'Qatar': 'QA',\r\n    'Reunion': 'RE',\r\n    'Romania': 'RO',\r\n    'Russia': 'RU',\r\n    'Rwanda': 'RW',\r\n    'Saint Barthelemy': 'BL',\r\n    'Saint Helena': 'SH',\r\n    'Saint Kitts and Nevis': 'KN',\r\n    'Saint Lucia': 'LC',\r\n    'Saint Martin': 'MF',\r\n    'Saint Pierre And Miquelon': 'PM',\r\n    'Saint Vincent and the Grenadines': 'VC',\r\n    'Samoa': 'WS',\r\n    'San Marino': 'SM',\r\n    'Sao Tome and Principe': 'ST',\r\n    'Saudi Arabia': 'SA',\r\n    'Senegal': 'SN',\r\n    'Serbia': 'RS',\r\n    'Seychelles': 'SC',\r\n    'Sierra Leone': 'SL',\r\n    'Singapore': 'SG',\r\n    'Slovakia': 'SK',\r\n    'Slovenia': 'SI',\r\n    'Solomon Islands': 'SB',\r\n    'Somalia': 'SO',\r\n    'South Africa': 'ZA',\r\n    'South Georgia And Sandwich Isl.': 'GS',\r\n    'South Sudan': 'SS',\r\n    'Spain': 'ES',\r\n    'Sri Lanka': 'LK',\r\n    'Sudan': 'SD',\r\n    'Suriname': 'SR',\r\n    'Svalbard And Jan Mayen': 'SJ',\r\n    'Eswatini': 'SZ',\r\n    'Sweden': 'SE',\r\n    'Switzerland': 'CH',\r\n    'Syria': 'SY',\r\n    'Taiwan*': 'TW',\r\n    'Tajikistan': 'TJ',\r\n    'Tanzania': 'TZ',\r\n    'Thailand': 'TH',\r\n    'Timor-Leste': 'TL',\r\n    'Togo': 'TG',\r\n    'Tokelau': 'TK',\r\n    'Tonga': 'TO',\r\n    'Trinidad and Tobago': 'TT',\r\n    'Tunisia': 'TN',\r\n    'Turkey': 'TR',\r\n    'Turkmenistan': 'TM',\r\n    'Turks And Caicos Islands': 'TC',\r\n    'Tuvalu': 'TV',\r\n    'Uganda': 'UG',\r\n    'Ukraine': 'UA',\r\n    'United Arab Emirates': 'AE',\r\n    'United Kingdom': 'GB',\r\n    'United States': 'US',\r\n    'United States Outlying Islands': 'UM',\r\n    'Uruguay': 'UY',\r\n    'Uzbekistan': 'UZ',\r\n    'Vanuatu': 'VU',\r\n    'Venezuela': 'VE',\r\n    'Vietnam': 'VN',\r\n    'Virgin Islands, British': 'VG',\r\n    'Virgin Islands, U.S.': 'VI',\r\n    'Wallis And Futuna': 'WF',\r\n    'Western Sahara': 'EH',\r\n    'West Bank and Gaza': 'PS',\r\n    'Yemen': 'YE',\r\n    'Zambia': 'ZM',\r\n    'Zimbabwe': 'ZW'\r\n};\r\n\r\nexport function GetCountryCode (str) {\r\n    if (isoCountries.hasOwnProperty(str)) {\r\n        return isoCountries[str];\r\n    } else {\r\n        return '';\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport {GetCountryCode} from './CountryCode';\r\n\r\nexport class CountryData extends Component {\r\n\r\n    getFlag = str => {\r\n        str = str.replace(/^\\s+|\\s+$/g, ''); // trim\r\n       \r\n        \r\n        var cd = GetCountryCode(str);\r\n\r\n\r\n        return `https://www.countryflags.io/${cd}/flat/64.png`\r\n        \r\n        \r\n    }\r\n\r\n    render() {\r\n        const {country, confirmed, recovered, deaths, color} = this.props\r\n\r\n        const card  = {\r\n            backgroundColor: color\r\n        }\r\n\r\n        const confirm = {\r\n            color: \"blue\"\r\n        }\r\n\r\n        const death = {\r\n            color: \"red\"\r\n        }\r\n\r\n        const recover = {\r\n            color: \"green\"\r\n        }\r\n\r\n        return (\r\n                <tr style={card}>\r\n                    <td>\r\n                        <img className=\"mb-2\" src={this.getFlag(country)} alt={country} width=\"30\" />\r\n                    </td>\r\n                    <td>{country}</td>\r\n                    <td style={confirm}><b>{new Intl.NumberFormat().format(confirmed)}</b></td>\r\n                    <td style={death}><b>{new Intl.NumberFormat().format(recovered)}</b></td>\r\n                    <td style={recover}><b>{new Intl.NumberFormat().format(deaths)}</b></td>\r\n                </tr> \r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryData\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport CountryData from './CountryData'\r\nimport { Table } from 'reactstrap'\r\n\r\nexport class Home extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            covid_data: null,\r\n            startDate: null\r\n        }\r\n\r\n        this.fetchData()\r\n    }\r\n\r\n    fetchData = async () =>  {\r\n\r\n        try {\r\n            const covid_data = await axios.get('https://pomber.github.io/covid19/timeseries.json')\r\n            const {data} = covid_data\r\n            const {startDate} = this.state\r\n\r\n            const start_date = startDate ? startDate : moment().subtract(1, 'day').format('MM/DD/YYYY')\r\n\r\n            console.log(start_date)\r\n\r\n            let result  = [] \r\n            // eslint-disable-next-line\r\n            Object.keys(data).map(key => {\r\n            // eslint-disable-next-line\r\n                data[key].map(item2 => {\r\n                    item2.country = key  \r\n                })\r\n                \r\n                result.push(data[key].pop())\r\n            })\r\n\r\n            \r\n            this.setState({ \r\n                covid_data: result,\r\n                startDate:start_date \r\n            })\r\n\r\n        } catch (error) {   \r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    generetaTotalCases = () => {\r\n        const { covid_data } = this.state\r\n        return covid_data.map(data => <CountryData {...data} color={this.generateRandomColor(data.country)} />)\r\n    }\r\n\r\n    generateRandomColor = name => {\r\n        let letters = 'BCDEF'.split('');\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++ ) {\r\n            color += letters[Math.floor(Math.random() * letters.length)];\r\n        }\r\n        return color;\r\n    }\r\n    \r\n    render() {\r\n        const { covid_data, startDate } = this.state\r\n        return (\r\n            <>\r\n             <h2 className=\"p-3\">Covid-19 World Tracker as of {startDate} 12:00AM</h2>\r\n        <Table responsive>\r\n             <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>\r\n                        Country\r\n                    </th>\r\n                    <th>\r\n                        Confirmed\r\n                    </th>\r\n                    <th>\r\n                        Recovered</th>\r\n                    <th>Death</th>\r\n                </tr>\r\n            </thead>\r\n                \r\n                <tbody>\r\n                    {\r\n                        covid_data  && this.generetaTotalCases()\r\n                    }\r\n                </tbody>\r\n        </Table>\r\n            </>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Home\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <footer class=\"py-1 bg-dark fixed-bottom\">\r\n        <div class=\"container\">\r\n          <p class=\"m-0 text-center text-white\">\r\n            Lmrl &copy; 2020\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Home from './components/Home'\r\nimport Footer from './components/Footer'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Home/>\r\n        <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}